--- system-config-printer-1.5.11/newprinter.py.mdv_custom-system-config-printer	2018-01-24 14:38:55.000000000 +0100
+++ system-config-printer-1.5.11/newprinter.py	2018-01-30 20:47:17.059552128 +0100
@@ -40,6 +40,8 @@ from gi.repository import Gtk
 import requests
 import functools
 
+import mdv_printer_custom
+
 import cups
 
 try:
@@ -1621,6 +1623,10 @@ class NewPrinterGUI(GtkGUI):
                 ppdname = 'raw'
                 self.ppd = ppdname
                 status = "exact"
+            elif self.device.uri and self.device.uri.startswith ("parallel"):
+                (p_make, p_model) = mdv_printer_custom.probe_parport_info(self.device.uri)
+                self.auto_make = p_make
+                self.auto_model = p_model
             else:
                 (status, ppdname) = self.ppds.\
                     getPPDNameFromDeviceID ("Generic",
@@ -1819,6 +1825,26 @@ class NewPrinterGUI(GtkGUI):
                 self.downloadable_driver_for_printer):
                 self.device.make_and_model = \
                     self.downloadable_driver_for_printer
+                # mandriva hook: ask to install the right driver
+                driver_packages=None
+                if not self.remotecupsqueue and not self.device.type in ("lpd", "ipp", "bluetooth", "smb"):
+                    if self.device.id_dict['DES'] != "AppSocket/HP JetDirect":
+                        if self.device.id_dict["MFG"] and self.device.id_dict["MDL"]:
+                            driver_packages = mdv_printer_custom.guess_driver_packages(self.device.id_dict["MFG"], self.device.id_dict["MDL"])
+                        else:
+                            driver_packages = mdv_printer_custom.guess_driver_packages(self.auto_make, self.auto_model)
+                if driver_packages:
+                    if not mdv_printer_custom.is_installed_packages(driver_packages):
+                        status = Gtk.ResponseType.YES
+                        while status != Gtk.ResponseType.NO:
+                            if not mdv_printer_custom.install_packages(driver_packages):
+                                dialog = Gtk.MessageDialog(self.NewPrinterWindow,
+                                        buttons=Gtk.ButtonsType.YES_NO,
+                                        message_format=_("The required driver package is missing, try again?"))
+                                status = dialog.run()
+                                dialog.destroy()
+                            else:
+                                break
 
     def setNPButtons(self):
         nr = self.ntbkNewPrinter.get_current_page()
@@ -3240,6 +3266,11 @@ class NewPrinterGUI(GtkGUI):
             # the selected device.
             if device.type == "parallel":
                 text = _("A printer connected to the parallel port.")
+                (p_make, p_model) = mdv_printer_custom.probe_parport_info(device.uri)
+                if p_make and p_model:
+                    make_model = p_make + " " + p_model
+                    info = make_model + " ("+ device.info + ")"
+                    device.info = inf
             elif device.type == "usb":
                 if (hasattr(device, "uri") and
                     device.uri.lower().find("fax") > -1):
--- system-config-printer-1.5.11/ppdsloader.py.mdv_custom-system-config-printer	2018-01-24 14:38:55.000000000 +0100
+++ system-config-printer-1.5.11/ppdsloader.py	2018-01-30 20:45:11.130510166 +0100
@@ -107,7 +107,10 @@ class PPDsLoader(GObject.GObject):
             self._bus):
             self._gpk_device_id = "MFG:%s;MDL:%s;" % (self._devid_dict["MFG"],
                                                       self._devid_dict["MDL"])
-            self._query_packagekit ()
+            # don't ask PackageKit for drivers, not used on Mageia (yet?)
+            # and produces a scary error message (Anssi 03/2012)
+            #self._query_packagekit ()
+            self._query_cups ()
         else:
             self._query_cups ()
 
--- system-config-printer-1.5.11/system-config-printer.py.mdv_custom-system-config-printer	2018-01-24 14:38:55.000000000 +0100
+++ system-config-printer-1.5.11/system-config-printer.py	2018-01-30 20:47:43.459561430 +0100
@@ -24,7 +24,7 @@
 # config is generated from config.py.in by configure
 import config
 
-import sys, os, time, re
+import sys, os, time, re, mdv_printer_custom
 import _thread
 import dbus
 import gi
@@ -535,6 +535,16 @@ class GUI(GtkGUI):
 
 
         self.PrintersWindow.show()
+        # task-printing-hp is needed even if you dont have a HP printer. (hp-makeuri, hp-info..)
+        if not mdv_printer_custom.is_installed_packages(['task-printing-server', 'task-printing-hp']):
+            if not mdv_printer_custom.install_packages(['task-printing-server', 'task-printing-hp']):
+                sys.exit (1)
+            # ensure any new udev rules are applied to existing devices
+            os.system("/sbin/udevadm control --reload-rules")
+            os.system("/sbin/udevadm trigger")
+            os.system("/sbin/service cups start")
+            os.system("/bin/systemctl start org.cups.cupsd.service")
+            self.on_btnRefresh_clicked(None)
 
     def display_properties_dialog_for (self, queue):
         model = self.dests_iconview.get_model ()
@@ -1962,6 +1972,7 @@ class GUI(GtkGUI):
     def on_new_printer_activate(self, widget, *UNUSED):
         busy (self.PrintersWindow)
         self.desensitise_new_printer_widgets ()
+        mdv_printer_custom.reload_parport()
         if not self.newPrinterGUI.init("printer",
                                        host=self.connect_server,
                                        encryption=self.connect_encrypt,
--- system-config-printer-1.5.11/udev/udev-add-printer.mdv_custom-system-config-printer	2018-01-24 14:38:55.000000000 +0100
+++ system-config-printer-1.5.11/udev/udev-add-printer	2018-01-30 20:45:11.131510166 +0100
@@ -25,6 +25,8 @@ import dbus
 import os
 import sys
 import traceback
+import mdv_printer_custom
+import re
 from syslog import *
 from functools import reduce
 
@@ -105,6 +107,81 @@ def add_queue (device_id, device_uris, f
         return
 
     syslog (LOG_DEBUG, "add_queue: URIs=%s" % device_uris)
+    syslog (LOG_DEBUG, "add_queue: ID=%s" % device_id )
+
+    """ We extract the manufacturer from device_id """
+    make = device_id.split(';')[0].split(':')[1]
+    model = device_id.split(';')[1].split(':')[1]
+
+    syslog (LOG_DEBUG, "add_queue: make=%s" % make )
+    syslog (LOG_DEBUG, "add_queue: model=%s" % model )
+
+    bus = dbus.SystemBus()
+
+    try:
+      obj = bus.get_object ("com.redhat.NewPrinterNotification",
+          "/com/redhat/NewPrinterNotification")
+      notification = dbus.Interface (obj,
+          "com.redhat.NewPrinterNotification")
+      #notification.GetReady ()
+    except:
+      pass
+
+    """Ensure we have cups installed and running"""
+    if not mdv_printer_custom.is_installed_packages(['task-printing-server']):
+      try:
+        syslog (LOG_DEBUG, "Calling InstallSpooler")
+        ret = bus.call_blocking('com.redhat.NewPrinterNotification',
+            '/com/redhat/NewPrinterNotification',
+            'com.redhat.NewPrinterNotification', 'InstallSpooler',
+            '', (), timeout=360)
+        if not ret:
+          syslog (LOG_DEBUG, "InstallSpooler Failed")
+          bus.call_blocking('com.redhat.NewPrinterNotification',
+              '/com/redhat/NewPrinterNotification',
+              'com.redhat.NewPrinterNotification', 'InstallSpoolerFailed',
+              '', (), timeout=360)
+          return
+      except dbus.DBusException as e:
+          syslog (LOG_DEBUG, "D-Bus method call failed: %s" % e)
+    packages = mdv_printer_custom.guess_driver_packages(make, model)
+    syslog (LOG_DEBUG, "PACKAGES: %s" % packages)
+    # if no package is found, try the auto detection anyway
+    if packages:
+      try:
+        if not mdv_printer_custom.is_installed_packages(packages):
+          packages_ok = bus.call_blocking('com.redhat.NewPrinterNotification',
+              '/com/redhat/NewPrinterNotification',
+              'com.redhat.NewPrinterNotification', 'InstallDriver',
+              'ssas', (make,model,packages), timeout=360)
+          if not packages_ok:
+            bus.call_blocking('com.redhat.NewPrinterNotification',
+                '/com/redhat/NewPrinterNotification',
+                'com.redhat.NewPrinterNotification', 'MissingDriver',
+                'ss', (make,model,))
+            return
+      except dbus.DBusException:
+        pass
+    if mdv_printer_custom.is_firmware_needed(make, model):
+      if (not mdv_printer_custom.is_firmware_present(make,model)) and (mdv_printer_custom.make2simplename(make) == "hp"):
+        try:
+          syslog (LOG_INFO, "Firmware PrinterFirmwareDownload")
+          bus.call_blocking('com.redhat.NewPrinterNotification',
+            '/com/redhat/NewPrinterNotification',
+            'com.redhat.NewPrinterNotification', 'PrinterFirmwareDownload',
+            'ss', (make,model,), timeout=360)
+          if not mdv_printer_custom.is_firmware_present(make,model):
+            bus.call_blocking('com.redhat.NewPrinterNotification',
+                '/com/redhat/NewPrinterNotification',
+                'com.redhat.NewPrinterNotification', 'MissingDriver',
+                'ss', (make,model,))
+            return
+          else:
+            return
+
+        except dbus.DBusException:
+          pass
+
     installer = None
     if fax_basename != False:
         notification = None
@@ -120,16 +197,6 @@ def add_queue (device_id, device_uris, f
             syslog (LOG_DEBUG, "D-Bus method call failed: %s" % e)
             notification = None
 
-        try:
-            obj = bus.get_object ("com.redhat.PrinterDriversInstaller",
-                                  "/com/redhat/PrinterDriversInstaller")
-            installer = dbus.Interface (obj,
-                                        "com.redhat.PrinterDriversInstaller")
-        except dbus.DBusException as e:
-            #syslog (LOG_DEBUG, "Failed to get D-Bus object for "
-            #        "PrinterDriversInstaller: %s" % e)
-            pass
-
     id_dict = cupshelpers.parseDeviceID (device_id)
     if installer:
         cmd = id_dict["CMD"]
@@ -151,6 +218,20 @@ def add_queue (device_id, device_uris, f
                                                      id_dict["DES"],
                                                      id_dict["CMD"],
                                                      device_uris[0])
+
+    """We reach here when we have cups installed"""
+    if os.system("/sbin/service cups status") != 0:
+      if os.system("/sbin/service cups restart") != 0:
+        bus = dbus.SystemBus()
+        try:
+          syslog (LOG_DEBUG, "Calling SpoolerStartFailed")
+          ret = bus.call_blocking('com.redhat.NewPrinterNotification',
+              '/com/redhat/NewPrinterNotification',
+              'com.redhat.NewPrinterNotification', 'SpoolerStartFailed',
+              '', (), timeout=360)
+        except dbus.DBusException as e:
+          syslog (LOG_DEBUG, "D-Bus method call failed: %s" % e)
+
     syslog (LOG_DEBUG, "PPD: %s; Status: %d" % (ppdname, status))
 
     if status == 0:
