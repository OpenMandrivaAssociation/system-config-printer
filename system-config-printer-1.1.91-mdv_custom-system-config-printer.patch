diff -p -up system-config-printer-1.2.0/system-config-printer.py.orig system-config-printer-1.2.0/system-config-printer.py
--- system-config-printer-1.2.0/system-config-printer.py.orig	2010-04-07 14:20:08.000000000 -0300
+++ system-config-printer-1.2.0/system-config-printer.py	2010-04-07 14:21:02.000000000 -0300
@@ -28,6 +28,7 @@ import errno
 import sys, os, tempfile, time, traceback, re, httplib, glob
 import subprocess
 import signal, thread
+import mdv_printer_custom
 from timedops import *
 import dbus
 try:
@@ -959,6 +960,13 @@ class GUI(GtkGUI, monitor.Watcher):
             except RuntimeError:
                 pass
 
+        # task-printing-hp is needed even if you dont have a HP printer. (hp-makeuri, hp-info..)
+        if not mdv_printer_custom.is_installed_packages(['task-printing-server', 'task-printing-hp']):
+            if not mdv_printer_custom.install_packages(['task-printing-server', 'task-printing-hp']):
+                sys.exit (1)
+            os.system("/sbin/service cups start")
+            self.on_btnRefresh_clicked(None)
+    
     def display_properties_dialog_for (self, queue):
         model = self.dests_iconview.get_model ()
         iter = model.get_iter_first ()
@@ -3585,6 +3593,7 @@ class GUI(GtkGUI, monitor.Watcher):
     # new printer
     def on_new_printer_activate(self, widget):
         self.busy (self.PrintersWindow)
+        mdv_printer_custom.reload_parport()
         self.newPrinterGUI.init("printer")
         self.ready (self.PrintersWindow)
 
@@ -4364,6 +4373,27 @@ class NewPrinterGUI(GtkGUI):
                     except:
                         nonfatalException ()
 
+                # mandriva hook: ask to install the right driver
+                driver_packages=None
+                if self.auto_make and not self.device.type in ("lpd", "ipp", "bluetooth", "smb"):
+                    if self.device.id_dict['DES'] != "AppSocket/HP JetDirect":
+                        if self.device.id_dict["MFG"] and self.device.id_dict["MDL"]:
+                            driver_packages = mdv_printer_custom.guess_driver_packages(self.device.id_dict["MFG"], self.device.id_dict["MDL"])
+                        else:
+                            driver_packages = mdv_printer_custom.guess_driver_packages(self.auto_make, self.auto_model)
+                if self.auto_make and driver_packages:
+                    if not mdv_printer_custom.is_installed_packages(driver_packages):
+                        status = gtk.RESPONSE_YES
+                        while status != gtk.RESPONSE_NO:
+                            if not mdv_printer_custom.install_packages(driver_packages):
+                                dialog = gtk.MessageDialog(self.NewPrinterWindow,
+                                        buttons=gtk.BUTTONS_YES_NO,
+                                        message_format=_("The required driver package is missing, try again?"))
+                                status = dialog.run()
+                                dialog.destroy()
+                            else:
+                                break
+        
                 if not self.remotecupsqueue:
                     try:
                         self.fetchPPDs(self.NewPrinterWindow)
@@ -4410,6 +4440,11 @@ class NewPrinterGUI(GtkGUI):
                                                     id_dict["CMD"],
                                                     self.device.uri,
                                                     self.jockey_installed_files)
+                    elif self.device.uri and self.device.uri.startswith ("parallel"):
+                        (p_make, p_model) = mdv_printer_custom.probe_parport_info(self.device.uri)
+                        self.auto_make = p_make
+                        self.auto_model = p_model                              
+
                     else:
                         (status, ppdname) = self.ppds.\
                             getPPDNameFromDeviceID ("Generic",
@@ -4891,6 +4926,8 @@ class NewPrinterGUI(GtkGUI):
         make_and_model = None
         if len (device.make_and_model) > 7:
             make_and_model = device.make_and_model
+            # force auto id generation below if we found the make and model
+            device.id = None
         elif len (device.info) > 7:
             make_and_model = device.info
             make_and_model = re.sub("\s*(\(|\d+\.\d+\.\d+\.\d+).*$", "", make_and_model)
@@ -5664,6 +5701,11 @@ class NewPrinterGUI(GtkGUI):
             # the selected device.
             if device.type == "parallel":
                 text = _("A printer connected to the parallel port.")
+                (p_make, p_model) = mdv_printer_custom.probe_parport_info(device.uri)
+                if p_make and p_model:
+                    make_model = p_make + " " + p_model
+                    info = make_model + " ("+ device.info + ")"
+                    device.info = info
             elif device.type == "usb":
                 text = _("A printer connected to a USB port.")
             elif device.type == "hp":
@@ -6149,7 +6191,7 @@ class NewPrinterGUI(GtkGUI):
 
         for make in makes:
             iter = model.append((make,))
-            if auto_make_lower != None and make.lower() == auto_make_lower:
+            if auto_make_lower != None and make.lower()==mdv_printer_custom.make2simplename(self.auto_make).lower():
                 path = model.get_path(iter)
                 self.tvNPMakes.set_cursor (path)
                 self.tvNPMakes.scroll_to_cell(path, None,
@@ -6189,7 +6231,7 @@ class NewPrinterGUI(GtkGUI):
         model = self.tvNPModels.get_model()
         model.clear()
         selected = False
-        is_auto_make = self.NPMake.lower () == self.auto_make.lower ()
+        is_auto_make = self.NPMake.lower () == mdv_printer_custom.make2simplename(self.auto_make)
         if is_auto_make:
             auto_model_lower = self.auto_model.lower ()
 
diff -p -up system-config-printer-1.2.0/udev/udev-add-printer.orig system-config-printer-1.2.0/udev/udev-add-printer
--- system-config-printer-1.2.0/udev/udev-add-printer.orig	2010-03-16 15:21:49.000000000 -0300
+++ system-config-printer-1.2.0/udev/udev-add-printer	2010-04-07 14:29:45.000000000 -0300
@@ -1,4 +1,5 @@
 #!/usr/bin/python
+# -*- coding: utf-8 -*-
 
 ## udev-add-printer
 
@@ -25,6 +26,8 @@ import dbus
 import os
 import sys
 import traceback
+import mdv_printer_custom
+import re
 from syslog import *
 
 def create_queue (c, printers, name, device_uri, ppdname, info):
@@ -68,6 +71,84 @@ def add_queue (device_id, device_uris, f
     """
 
     syslog (LOG_DEBUG, "add_queue: URIs=%s" % device_uris)
+    syslog (LOG_DEBUG, "add_queue: ID=%s" % device_id )
+
+    """ We extract the manufacturer from device_id """
+    make = device_id.split(';')[0].split(':')[1]
+    model = device_id.split(';')[1].split(':')[1]
+
+    syslog (LOG_DEBUG, "add_queue: make=%s" % make )
+    syslog (LOG_DEBUG, "add_queue: model=%s" % model )
+    
+    bus = dbus.SystemBus()
+    
+    try:
+      obj = bus.get_object ("com.redhat.NewPrinterNotification",
+          "/com/redhat/NewPrinterNotification")
+      notification = dbus.Interface (obj,
+          "com.redhat.NewPrinterNotification")
+      #notification.GetReady ()
+    except:
+      pass
+
+    """Ensure we have cups installed and running"""
+    if not mdv_printer_custom.is_installed_packages(['task-printing-server']):
+      try:
+        syslog (LOG_DEBUG, "Calling InstallSpooler")
+        ret = bus.call_blocking('com.redhat.NewPrinterNotification',
+            '/com/redhat/NewPrinterNotification',
+            'com.redhat.NewPrinterNotification', 'InstallSpooler',
+            '', (), timeout=360)
+        if not ret:
+          syslog (LOG_DEBUG, "InstallSpooler Failed")
+          bus.call_blocking('com.redhat.NewPrinterNotification',
+              '/com/redhat/NewPrinterNotification',
+              'com.redhat.NewPrinterNotification', 'InstallSpoolerFailed',
+              '', (), timeout=360)
+          return
+      except dbus.DBusException, e:
+          syslog (LOG_DEBUG, "D-Bus method call failed: %s" % e)
+
+
+    packages = mdv_printer_custom.guess_driver_packages(make, model)
+    syslog (LOG_DEBUG, "PACKAGES: %s" % packages)
+    # if no package is found, try the auto detection anyway
+    if packages:
+      try:
+        if not mdv_printer_custom.is_installed_packages(packages):
+          packages_ok = bus.call_blocking('com.redhat.NewPrinterNotification',
+              '/com/redhat/NewPrinterNotification',
+              'com.redhat.NewPrinterNotification', 'InstallDriver',
+              'ssas', (make,model,packages), timeout=360)
+          if not packages_ok:
+            bus.call_blocking('com.redhat.NewPrinterNotification',
+                '/com/redhat/NewPrinterNotification',
+                'com.redhat.NewPrinterNotification', 'MissingDriver',
+                'ss', (make,model,))
+            return
+      except dbus.DBusException, e:
+        pass
+      
+    if mdv_printer_custom.is_firmware_needed(make, model):
+      if (not mdv_printer_custom.is_firmware_present(make,model)) and (mdv_printer_custom.make2simplename(make) == "hp"):
+        try:
+          syslog (LOG_INFO, "Firmware PrinterFirmwareDownload")
+          bus.call_blocking('com.redhat.NewPrinterNotification',
+            '/com/redhat/NewPrinterNotification',
+            'com.redhat.NewPrinterNotification', 'PrinterFirmwareDownload',
+            'ss', (make,model,), timeout=360)
+          if not mdv_printer_custom.is_firmware_present(make,model):
+            bus.call_blocking('com.redhat.NewPrinterNotification',
+                '/com/redhat/NewPrinterNotification',
+                'com.redhat.NewPrinterNotification', 'MissingDriver',
+                'ss', (make,model,))
+            return
+          else:
+            return
+          
+        except dbus.DBusException, e:
+          pass
+ 
     installer = None
     if fax_basename != False:
         notification = None
@@ -83,15 +164,6 @@ def add_queue (device_id, device_uris, f
             syslog (LOG_DEBUG, "D-Bus method call failed: %s" % e)
             notification = None
 
-        try:
-            obj = bus.get_object ("com.redhat.PrinterDriversInstaller",
-                                  "/com/redhat/PrinterDriversInstaller")
-            installer = dbus.Interface (obj,
-                                        "com.redhat.PrinterDriversInstaller")
-        except dbus.DBusException, e:
-            syslog (LOG_DEBUG, "Failed to get D-Bus object for "
-                    "PrinterDriversInstaller: %s" % e)
-
     id_dict = cupshelpers.parseDeviceID (device_id)
     if installer:
         cmd = id_dict["CMD"]
@@ -113,6 +185,19 @@ def add_queue (device_id, device_uris, f
                                                      id_dict["DES"],
                                                      id_dict["CMD"],
                                                      device_uris[0])
+    """We reach here when we have cups installed"""
+    if os.system("/sbin/service cups status") != 0:
+      if os.system("/sbin/service cups restart") != 0:
+        bus = dbus.SystemBus()
+        try:
+          syslog (LOG_DEBUG, "Calling SpoolerStartFailed")
+          ret = bus.call_blocking('com.redhat.NewPrinterNotification',
+              '/com/redhat/NewPrinterNotification',
+              'com.redhat.NewPrinterNotification', 'SpoolerStartFailed',
+              '', (), timeout=360)
+        except dbus.DBusException, e:
+          syslog (LOG_DEBUG, "D-Bus method call failed: %s" % e)
+          
     syslog (LOG_DEBUG, "PPD: %s; Status: %d" % (ppdname, status))
 
     if status == 0:
